name: Auto Update Cursor Snap

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:      # Allow manual trigger
    inputs:
      force_rebuild:
        description: 'Force rebuild and publish regardless of version checks'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      x64_version: ${{ steps.x64_version.outputs.version }}
      x64_url: ${{ steps.x64_version.outputs.url }}
      arm64_version: ${{ steps.arm64_version.outputs.version }}
      arm64_url: ${{ steps.arm64_version.outputs.url }}
      should_update: ${{ steps.check_update.outputs.should_update }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest x64 version
        id: x64_version
        run: |
          DOWNLOAD_URL="https://www.cursor.com/api/download?platform=linux-x64&releaseTrack=latest"
          echo "Checking download URL: $DOWNLOAD_URL"
          
          # Get the JSON response from the API
          API_RESPONSE=$(curl -s "$DOWNLOAD_URL")
          
          # Extract the downloadUrl from the JSON response
          REDIRECT_URL=$(echo "$API_RESPONSE" | grep -o '"downloadUrl":"[^"]*"' | sed 's/"downloadUrl":"//;s/"//')
          
          # Check if REDIRECT_URL is empty
          if [ -z "$REDIRECT_URL" ]; then
            REDIRECT_URL="https://downloads.cursor.com/production/client/linux/x64/appimage/Cursor-0.47.4-8f8a2000673d2c48f6cac5eea2f3f9f2ed5e4ec2.deb.glibc2.28-x86_64.AppImage"
            VERSION="0.47.4"
          else
            # Try to extract version from URL with different patterns
            VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[^-]+(?=-)' || echo "")
            
            # If the first pattern fails, try an alternative pattern
            if [ -z "$VERSION" ]; then
              VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[\d\.]+' || echo "0.47.4")
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "url=$REDIRECT_URL" >> $GITHUB_OUTPUT
          echo "X64 Version: $VERSION"
          echo "X64 URL: $REDIRECT_URL"

      - name: Get latest arm64 version
        id: arm64_version
        run: |
          DOWNLOAD_URL="https://www.cursor.com/api/download?platform=linux-arm64&releaseTrack=latest"
          echo "Checking download URL: $DOWNLOAD_URL"
          
          # Get the JSON response from the API
          API_RESPONSE=$(curl -s "$DOWNLOAD_URL")
          
          # Extract the downloadUrl from the JSON response
          REDIRECT_URL=$(echo "$API_RESPONSE" | grep -o '"downloadUrl":"[^"]*"' | sed 's/"downloadUrl":"//;s/"//')
          
          # Check if REDIRECT_URL is empty
          if [ -z "$REDIRECT_URL" ]; then
            REDIRECT_URL="https://downloads.cursor.com/production/client/linux/arm64/appimage/Cursor-0.47.4-8f8a2000673d2c48f6cac5eea2f3f9f2ed5e4ec2.deb.glibc2.28-aarch64.AppImage"
            VERSION="0.47.4"
          else
            # Try to extract version from URL with different patterns
            VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[^-]+(?=-)' || echo "")
            
            # If the first pattern fails, try an alternative pattern
            if [ -z "$VERSION" ]; then
              VERSION=$(echo "$REDIRECT_URL" | grep -oP 'Cursor-\K[\d\.]+' || echo "0.47.4")
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "url=$REDIRECT_URL" >> $GITHUB_OUTPUT
          echo "ARM64 Version: $VERSION"
          echo "ARM64 URL: $REDIRECT_URL"

      - name: Install Snapcraft to check Snap Store version
        run: |
          sudo snap install snapcraft --classic

      - name: Check Snap Store version
        id: snap_store_version
        run: |
          # Query the Snap Store for the current version of cursor-ide
          SNAP_INFO=$(curl -s "https://api.snapcraft.io/v2/snaps/info/cursor-ide" -H "Snap-Device-Series: 16")
          
          if echo "$SNAP_INFO" | grep -q "not found"; then
            echo "Snap package not found in the Snap Store"
            SNAP_VERSION="0.0.0"
          else
            # Try to extract the version from the Snap Store response
            SNAP_VERSION=$(echo "$SNAP_INFO" | grep -o '"version":"[^"]*"' | head -1 | sed 's/"version":"//;s/"//')
            
            # If version extraction failed, set a default
            if [ -z "$SNAP_VERSION" ]; then
              SNAP_VERSION="0.0.0"
            fi
          fi
          
          echo "snap_version=$SNAP_VERSION" >> $GITHUB_OUTPUT
          echo "Snap Store Version: $SNAP_VERSION"

      - name: Check if update is needed
        id: check_update
        run: |
          # Get current version from README
          CURRENT_VERSION=$(grep -oP 'Latest version: \K.*' README.md || echo "0.0.0")
          SNAP_VERSION="${{ steps.snap_store_version.outputs.snap_version }}"
          NEW_VERSION="${{ steps.x64_version.outputs.version }}"
          
          echo "Current README version: $CURRENT_VERSION"
          echo "Current Snap Store version: $SNAP_VERSION"
          echo "New Cursor IDE version: $NEW_VERSION"
          
          # Check if force_rebuild is enabled
          FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"
          if [ "$FORCE_REBUILD" == "true" ]; then
            echo "Force rebuild enabled, will update regardless of version checks"
            echo "should_update=true" >> $GITHUB_OUTPUT
            echo "Update forced via manual trigger"
            exit 0
          fi
          
          # Compare versions - update if either README or Snap Store version is different
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ] || [ "$SNAP_VERSION" != "$NEW_VERSION" ]; then
            echo "should_update=true" >> $GITHUB_OUTPUT
            echo "Update needed: README=$CURRENT_VERSION, Snap Store=$SNAP_VERSION, New=$NEW_VERSION"
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
            echo "No update needed: Both README and Snap Store versions are already $NEW_VERSION"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should_update == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        platform: [linux-x64, linux-arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [ "${{ matrix.platform }}" == "linux-x64" ]; then
            echo "CURSOR_VERSION=${{ needs.check-version.outputs.x64_version }}" >> $GITHUB_ENV
            echo "DOWNLOAD_URL=${{ needs.check-version.outputs.x64_url }}" >> $GITHUB_ENV
          else
            echo "CURSOR_VERSION=${{ needs.check-version.outputs.arm64_version }}" >> $GITHUB_ENV
            echo "DOWNLOAD_URL=${{ needs.check-version.outputs.arm64_url }}" >> $GITHUB_ENV
          fi

      - name: Install Snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Create snapcraft.yaml
        run: |
          # Create snapcraft.yaml with the correct version and URL
          cat > snap/snapcraft.yaml << EOF
          name: cursor-ide
          base: core22
          version: '${{ env.CURSOR_VERSION }}'
          summary: Modern IDE powered by AI
          description: |
            Cursor is a modern IDE powered by AI, designed to help developers write, 
            understand and debug code faster. It features AI-powered code completion, 
            refactoring, and explanation capabilities.

          grade: stable
          confinement: strict

          apps:
            cursor-ide:
              command: bin/cursor
              extensions: [gnome]
              plugs:
                - desktop
                - desktop-legacy
                - wayland
                - x11
                - home
                - network
                - browser-support
                - unity7
                - opengl
                - audio-playback

          parts:
            cursor-ide:
              plugin: dump
              source: ${{ env.DOWNLOAD_URL }}
              source-type: file
              override-build: |
                craftctl default
                mkdir -p \$SNAPCRAFT_PART_INSTALL/bin/
                cp \$SNAPCRAFT_PART_SRC/* \$SNAPCRAFT_PART_INSTALL/bin/cursor
                chmod +x \$SNAPCRAFT_PART_INSTALL/bin/cursor
                cd \$SNAPCRAFT_PART_INSTALL
                \$SNAPCRAFT_PART_INSTALL/bin/cursor --appimage-extract
                rm \$SNAPCRAFT_PART_INSTALL/bin/cursor
                mv \$SNAPCRAFT_PART_INSTALL/squashfs-root/* \$SNAPCRAFT_PART_INSTALL/bin/
                cd \$SNAPCRAFT_PART_INSTALL/bin/
                cp AppRun cursor
          EOF
          
          # Show the updated snapcraft.yaml for debugging
          echo "Created snapcraft.yaml:"
          cat snap/snapcraft.yaml

      - name: Build Snap
        run: |
          # Build the snap package
          sudo SNAPCRAFT_BUILD_ENVIRONMENT=host snapcraft
          
          # Rename the snap file to include the platform
          if [ -f "cursor-ide_${{ env.CURSOR_VERSION }}_amd64.snap" ]; then
            mv cursor-ide_${{ env.CURSOR_VERSION }}_amd64.snap cursor-ide_${{ env.CURSOR_VERSION }}_${{ matrix.platform }}.snap
          fi

      - name: Upload Snap Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cursor-ide-snap-${{ matrix.platform }}
          path: cursor-ide*.snap
          retention-days: 7  # Increase retention to ensure artifacts are available

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.CURSOR_VERSION }}-${{ matrix.platform }}
          name: Cursor IDE Snap ${{ env.CURSOR_VERSION }} (${{ matrix.platform }})
          files: cursor-ide*.snap
          draft: false
          fail_on_unmatched_files: false
          prerelease: false

  update-readme:
    needs: [check-version, build-and-release]
    if: needs.check-version.outputs.should_update == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update README version
        run: |
          # Update README with latest version
          sed -i "s/Latest version: .*/Latest version: ${{ needs.check-version.outputs.x64_version }}/g" README.md
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit and push the changes
          git add README.md
          git commit -m "Update version to ${{ needs.check-version.outputs.x64_version }}"
          git push 

  publish-to-snap-store:
    needs: [build-and-release]
    if: needs.check-version.outputs.should_update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: cursor-ide-snap-linux-x64
          path: .
        continue-on-error: true

      - name: Download arm64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: cursor-ide-snap-linux-arm64
          path: .
        continue-on-error: true

      - name: Check for snap files
        id: check_snap
        run: |
          if ls cursor-ide*.snap 1> /dev/null 2>&1; then
            echo "SNAP_FILES_EXIST=true" >> $GITHUB_ENV
            echo "Snap files found:"
            ls -la cursor-ide*.snap
          else
            echo "SNAP_FILES_EXIST=false" >> $GITHUB_ENV
            echo "No snap files found. Cannot publish to Snap Store."
            exit 1
          fi

      - name: Install Snapcraft
        if: env.SNAP_FILES_EXIST == 'true'
        run: sudo snap install snapcraft --classic

      - name: Login to Snap Store
        if: env.SNAP_FILES_EXIST == 'true'
        id: snapcraft_login
        run: |
          # Check if the secret is set
          if [ -z "${{ secrets.SNAPCRAFT_LOGIN_FILE }}" ]; then
            echo "Error: SNAPCRAFT_LOGIN_FILE secret is not set in the repository"
            exit 1
          fi
          
          # Create a temporary directory with restricted permissions
          TEMP_DIR=$(mktemp -d)
          chmod 700 "$TEMP_DIR"
          
          # Write credentials to a file without echoing to logs
          echo "Decoding Snap Store credentials..."
          # Use a subshell to avoid exposing credentials in process list
          (
            cd "$TEMP_DIR"
            printf "%s" "${{ secrets.SNAPCRAFT_LOGIN_FILE }}" | base64 -d > snapcraft.login 2>/dev/null
            if [ $? -ne 0 ]; then
              echo "Error: Failed to decode base64 credentials"
              exit 1
            fi
            
            # Check if the file is empty
            if [ ! -s "snapcraft.login" ]; then
              echo "Error: Decoded credentials file is empty"
              exit 1
            fi
            
            # Export credentials as environment variable
            export SNAPCRAFT_STORE_CREDENTIALS=$(cat snapcraft.login)
            
            # Set for the rest of the job
            echo "SNAPCRAFT_STORE_CREDENTIALS<<EOF" >> $GITHUB_ENV
            cat snapcraft.login >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            # Clean up immediately
            rm -f snapcraft.login
          )
          
          # Clean up temp directory
          rm -rf "$TEMP_DIR"
          
          # Verify authentication works
          echo "Authenticating with Snap Store..."
          if ! snapcraft whoami > /dev/null 2>&1; then
            echo "Error: Failed to authenticate with Snap Store. Credentials may be invalid or expired."
            exit 1
          fi
          
          echo "Successfully authenticated with Snap Store"
          snapcraft whoami | grep -v "^email:" # Show account info without revealing email

      - name: Publish to Snap Store
        if: env.SNAP_FILES_EXIST == 'true'
        run: |
          for snap_file in cursor-ide*.snap; do
            if [ -f "$snap_file" ]; then
              echo "Publishing $snap_file to Snap Store..."
              snapcraft upload --release=stable "$snap_file" || {
                echo "Error: Failed to publish $snap_file to Snap Store"
                exit 1
              }
              echo "Published $snap_file successfully!"
            fi
          done 
